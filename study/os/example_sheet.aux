\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Processes and Scheduling}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.a}Modern computers store data values in a variety of \IeC {\textquotedblleft }memories\IeC {\textquotedblright }, each with differing size and access speeds. Briefly describe each of the following:}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.1.b}Give an example situation in which operating systems effectively consider disk storage to be a fourth type of \IeC {\textquotedblleft }memory\IeC {\textquotedblright }.}{1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.a}Describe (with the aid of a diagram where appropriate) the representation in main memory of:}{1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.b}Does an operating system need to know whether the contents of a particular register represent a signed or unsigned integer?}{2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.2.c}Describe what occurs during a context switch}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Describe with the aid of a diagram how a simple computer executes a program in terms of the fetch-execute cycle, including the ways in which arithmetic instructions, memory accesses and control flow instructions are handled}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Fetch Execute Cycle}}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}Process scheduling can be preemptive or non-preemptive. Compare and contrast these approaches, commenting on issues of simplicity, fairness, performance and required hardware support.}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.5.a}Describe how the CPU is allocated to processes if static priority scheduling is used. Be sure to consider the various possibilities available in the case of a tie.}{5}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.5.b}\IeC {\textquotedblleft }All scheduling algorithms are essentially priority scheduling algorithms.\IeC {\textquotedblright } Discuss this statement with reference to the first-come first-served (FCFS), shortest job first (SJF), shortest remaining time first (SRTF) and round-robin (RR) scheduling algorithms.}{6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.5.c}What is the major problem with static priority scheduling and how may it be addressed?}{6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.5.d}Why do many CPU scheduling algorithms try to favour I/O intensive jobs?}{7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.6}An operating system uses a single queue round-robin scheduling algorithm for all processes. You are told that a quantum of three time units is used.}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.6.a}What can you infer about the scheduling algorithm?}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.6.b}Why is this sort of algorithm suitable for a multi-user operating system?}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.6.c}The following processes are to be scheduled by the operating system. None of the processes ever blocks. New processes are added to the tail of the queue and do not disrupt the currently running process. Assuming context switches are instantaneous, determine the response time for each process.}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.6.d}Give one advantage and one disadvantage of using a small quantum.}{8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.7}}{8}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.a}Describe with the aid of a diagram the life-cycle of a process. You should describe each of the states that it can be in, and the reasons it moves between these states.}{8}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Fetch Execute Cycle}}{8}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.b}What information does the operating system keep in the process control block?}{9}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.c}What information do the shortest job first (SJF) and shortest remaining time first (SRTF) algorithms require about each job or process? How can this information be obtained?}{9}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.d}Give one advantage and one disadvantage of non-preemptive scheduling.}{10}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.e}What steps does the operating system take when an interrupt occurs? Consider both the programmed I/O and DMA cases, and the interaction with the CPU scheduler.}{10}}
\newlabel{DMA}{{1.7.e}{10}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {1.7.f}What problems could occur if a system experienced a very high interrupt load? What if the device[s] in question were DMA-capable?}{11}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Memory Management}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}What is the address binding problem?}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}The address binding problem can be solved at compile time, load time or run time. For each case, explain what form the solution takes, and give one advantage and one disadvantage.}{12}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}For each of the following, indicate if the statement is true or false, and explain why:}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.a}Preemptive schedulers require hardware support.}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.b}A context switch can be implemented by a flip-flop stored in the translation lookaside buffer (TLB).}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.c}Non-blocking I/O is possible even when using a block device.}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.d}Shortest job first (SJF) is an optimal scheduling algorithm.}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.e}Round-robin scheduling can suffer from the so-called \IeC {\textquoteleft }convoy effect\IeC {\textquoteright }.}{13}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.f}A paged virtual memory is smaller than a segmented one.}{14}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.g}Direct memory access (DMA) makes devices go faster.}{14}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.h}System calls are an optional extra in modern operating systems.}{14}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.i}In Unix, hard-links cannot span mount points.}{15}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.4.j}The Unix shell supports redirection to the buffer cache.}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Most operating systems provide each process with its own address space by providing a level of indirection between virtual and physical addresses}{15}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.5.a}Give three benefits of this approach}{15}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.5.b}Are there any drawbacks? Justify your answer.}{15}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.5.c}A processor may support a paged or a segmented virtual address space.}{15}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6}System calls are part of most modern operating systems.}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.a}What is the purpose of a system call?}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.b}What mechanism is typically used to implement system calls?}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.c}Operating systems need to be able to prevent applications from crashing or locking up the system, or from interfering with other applications. Which three kinds of hardware support do we require to accomplish this?}{16}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.d}How do applications request that the operating system perform tasks on their behalf?}{17}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.e}What could we do if we did not have the requisite hardware support?}{17}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.f}In the context of memory management, under which circumstances do external and internal fragmentation occur? How can each be handled?}{17}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.g}What is the purpose of a page table? What sort of information might it contain? How does it interact with a TLB?}{17}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {2.6.h}Describe with the aid of a diagram a two-level page table. Explain the motivation behind the structure and how it operates.}{18}}
\@writefile{toc}{\contentsline {section}{\numberline {3}File Systems \& IO}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Explain how a program accesses I/O devices when:}{19}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.a}it is running in supervisor-mode / kernel-mode}{19}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.1.b}it is running in user-mode}{19}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}From the point of view of the device driver, data may be read from an I/O device using polling, interrupt-driven programmed I/O, or direct memory access (DMA). Briefly explain each of these terms, and in each case outline using pseudo-code (or a flow chart) the flow of control in the device driver when reading data from the device.}{19}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.a}Polling}{20}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.b}Interrupts}{20}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.2.c}DMA}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}From the point of view of the application programmer, data may be read from a device in a blocking, non-blocking or asynchronous fashion. Using a keyboard as an example device, describe the expected behaviour in each case.}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.a}Blocking}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.b}Non-Blocking}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.3.c}Asynchronous}{21}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}File systems comprise a directory service and a storage service.}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.4.a}What are the two main functions of the directory service?}{21}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.4.b}What is a directory hierarchy? Explain your answer with the aid of a diagram.}{22}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Directory Hierarchy}}{22}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.4.c}What information is held in file meta-data?}{22}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.4.d}What is a hard link? Does file system support for hard links place any restrictions on the location of file meta-data?}{23}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {3.4.e}What is a soft (or symbolic) link? Does file system support for soft links place any restrictions on the location of file meta-data?}{23}}
